name: macOS Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test-macos:
    name: Test on macOS
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        macos-version: [12, 13, 14]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        brew update
        brew install ffmpeg portaudio
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-qt pytest-cov pytest-xvfb
        
    - name: Run linting
      run: |
        ruff check src/ tests/
        black --check src/ tests/
        mypy src/
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=src --cov-report=xml --cov-report=html -v
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
        
    - name: Run performance benchmarks
      run: |
        python tests/benchmarks/fps_test.py
        python tests/benchmarks/latency_test.py
        python tests/benchmarks/memory_test.py
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-artifacts-${{ matrix.python-version }}-${{ matrix.macos-version }}
        path: |
          htmlcov/
          *.log
          
  build-dmg:
    name: Build macOS DMG
    runs-on: macos-latest
    needs: test-macos
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        brew update
        brew install ffmpeg portaudio create-dmg
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install py2app
        
    - name: Build application
      run: |
        python setup.py py2app
        
    - name: Create DMG
      run: |
        create-dmg \
          --volname "CUEpoint v2.1" \
          --volicon "assets/icons/volume_icon.icns" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "CUEpoint.app" 175 120 \
          --hide-extension "CUEpoint.app" \
          --app-drop-link 425 120 \
          "CUEpoint-v2.1.dmg" \
          "dist/"
          
    - name: Code sign DMG (if certificates available)
      if: env.APPLE_CERTIFICATE != ''
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      run: |
        # Import certificate
        echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P $APPLE_CERTIFICATE_PASSWORD -T /usr/bin/codesign
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        
        # Sign DMG
        codesign --force --verify --verbose --sign "Developer ID Application" CUEpoint-v2.1.dmg
        
    - name: Notarize DMG (if credentials available)
      if: env.APPLE_ID != ''
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        xcrun notarytool submit CUEpoint-v2.1.dmg \
          --apple-id $APPLE_ID \
          --password $APPLE_PASSWORD \
          --team-id $APPLE_TEAM_ID \
          --wait
          
        xcrun stapler staple CUEpoint-v2.1.dmg
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v3
      with:
        name: CUEpoint-macOS-DMG
        path: CUEpoint-v2.1.dmg
        
    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./CUEpoint-v2.1.dmg
        asset_name: CUEpoint-v2.1-macOS.dmg
        asset_content_type: application/octet-stream
