[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cuepoint"
version = "2.1.0"
description = "Professional DJ Waveform & Analysis Suite"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CUEpoint Team", email = "dev@cuepoint.app"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
]
requires-python = ">=3.11"
dependencies = [
    "PyQt6>=6.6.0",
    "PyQtGraph>=0.13.3",
    "pydub>=0.25.1",
    "sounddevice>=0.4.6",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "librosa>=0.10.1",
    "madmom>=0.16.1",
    "aubio>=0.4.9",
    "mutagen>=1.47.0",
    "pytaglib>=2.1.0",
    "tensorflow>=2.13.0",
    "scikit-learn>=1.3.0",
    "fastapi>=0.103.0",
    "uvicorn>=0.23.0",
    "pydantic>=2.3.0",
    "click>=8.1.0",
    "pyobjc-framework-Cocoa>=9.2.0",
    "pyobjc-framework-AVFoundation>=9.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-qt>=4.2.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.0.287",
    "mypy>=1.5.0",
]
profiling = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

[project.scripts]
cuepoint = "cuepoint.main:main"

[project.urls]
Homepage = "https://github.com/cuepoint/cuepoint"
Repository = "https://github.com/cuepoint/cuepoint.git"
Issues = "https://github.com/cuepoint/cuepoint/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
cuepoint = ["config/*.json", "assets/*.png", "assets/*.icns"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "madmom.*",
    "aubio.*",
    "pytaglib.*",
    "pydub.*",
    "sounddevice.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
